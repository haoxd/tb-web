<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	
    
    <!--定义连接管理器  -->
	<bean id="httpClientConnectionManager" class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager">
	    <property name="maxTotal" value="${http.maxTotal}" /><!--最大链接数  -->
	    <property name="defaultMaxPerRoute" value="${http.defaultMaxPerRoute}" /><!--每个主机地址的并发数 -->	    
	</bean>
	
	<!-- 创建httpclient对象的构建器 -->
	<bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder" factory-method="create"> 	
	    <!--将httpclient链接管理器注入到httpclient的构建器  -->
	    <property name="connectionManager" ref="httpClientConnectionManager"/>	    
	</bean>
	
	<!-- 得到httpClient的实例 -->
	<bean id="httpClient" factory-bean="httpClientBuilder" factory-method="build"/>
	
	<!--从连接池中获取一个已有的httpclient对象继续使用,如果没有则创建Httpclient对象-->
	<!--因为存在存连接管理器当中获取多个连接 ，所以该对象定义为“多例模式” -->
	<!--相当于代码：CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(cm).build();  -->
	<bean class="org.apache.http.impl.client.CloseableHttpClient" 
	    factory-bean="httpClientBuilder" factory-method="build"
	    scope="prototype">    
	</bean>
	
	<!--httpclitnt请求配置构建器  -->
	<!-- 一下俩部分相当于代码：
		RequestConfig config = RequestConfig.custom().setConnectTimeout(1000) // 创建连接的最长时间
         .setConnectionRequestTimeout(500) // 从连接池中获取到连接的最长时间
         .setSocketTimeout(10 * 1000) // 数据传输的最长时间
         .setStaleConnectionCheckEnabled(true) // 提交请求前测试连接是否可用
         .build();
      -->
	<bean id="requestConfigBuilder" class="org.apache.http.client.config.RequestConfig.Builder">
	     <property name="connectTimeout" value="${http.connectTimeout}"/><!-- 创建连接的超时时间 -->
	     <property name="connectionRequestTimeout" value="${http.connectionRequestTimeout}"/><!--从连接池中获取到连接的最长时间  -->
	     <property name="socketTimeout" value="${http.socketTimeout}"/><!--数据传输的最长时间  -->
	     <property name="staleConnectionCheckEnabled" value="${http.staleConnectionCheckEnabled}"/><!-- 提交请求前测试连接是否可用 -->
	    
	</bean>
	<!--httpclient请求配置对象  -->
	<bean class="org.apache.http.client.config.RequestConfig" 
	    factory-bean="requestConfigBuilder"
	    factory-method="build"/>    
	
	<!--定期关闭无效连接，清理无效链接  -->
	<bean class="com.tb.web.sys.httplient.IdleConnectionEvictor" destroy-method="shutdown">
	    <constructor-arg index="0" ref="httpClientConnectionManager"/>	  
	</bean>
	<!-- 得到requestConfig实例 -->
	<bean id="requestConfig" factory-bean="requestConfigBuilder" factory-method="build" />

</beans>
